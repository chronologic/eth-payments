#!/usr/bin/env node
const commander = require('commander');

const config = require("../config");
const pkgJson = require('../package.json');

const PaymentService = require('../lib/PaymentService');

const listDecomposer = (val) => {
  return val.split(',');
};

commander
  .version(pkgJson.version);

commander
  .option('-s, --source <value>', 'Source ETH address')
  .option('-S, --sources <value>', 'Comma-separated list of source addresses', listDecomposer);

commander
  .option('-t, --target <value>', 'Target ETH address')
  .option('-T, --targets <value>', 'Comma-separated list of target addresses', listDecomposer);

commander
  .option('-e, --eth <value>', 'ETH Amount');

commander
  .command('collect')
  .description('collect ETH from multiple accounts')
  .action(function () {
    let ps = new PaymentService();
    return ps
      .flow(commander.eth, commander.sources || [commander.source] || [], [commander.target])
      .then(() => {
        console.log('ETH have been collected.');
        process.exit();
      })
      .catch((err) => {
        console.log(`Some shit happened: ${err.message}`);
        process.exit();
      });
  });

commander
  .command('distribute')
  .description('distribute ETH to multiple accounts')
  .action(function () {
    let ps = new PaymentService();
    return ps
      .flow(commander.eth, [commander.source], commander.targets || [commander.target] || [])
      .then(() => {
        console.log('ETH have been distributed.');
        process.exit();
      })
      .catch((err) => {
        console.log(`Some shit happened: ${err.message}`);
        process.exit();
      });
  });

commander.on('--help', function () {
  console.log('  Example:');
  console.log();
  console.log('    $ payments collect --eth 1.0 --source 0x0 --targets 0x0,0x0');
  console.log('    $ payments distribute --eth 1.0 --sources 0x0,0x0 --target 0x0');
  console.log();
});

commander.parse(process.argv);